@using CoZ.ViewModels
@using CoZ.Models.Locations
@model CoZ.ViewModels.MapViewModel
@{
    ViewBag.Title = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    .parent {
        position: relative;
        top: 0;
        left: 0;
    }
    .img1 {
        position: relative;
        top: 0;
        right: 0;
    }
    .character {
        position: absolute;
        top: 0;
        right: 0;
    }
</style>

<h2>Map</h2>
<robert>
<table>

    @for (int i = 20; i >= 1; i--)
    {
    <tr>
        @for (int j = 1; j <= 20; j++)
        {
        <td>
            <div class="parent">
            @*<img src="~/Images/MapImages/@{Model.Images[i, j]}.png" />*@

            @if (Model.Locations.Single(l => l.XCoord == j && l.YCoord == i) is Forest)
            {
                <img class="img1" src="~/Images/MapImages/Forrest.png" />
            }
            else if (Model.Locations.Single(l => l.XCoord == j && l.YCoord == i) is Mountain)
            {
                <img class="img1" src="~/Images/MapImages/Mountain.png" />
            }
            else if (Model.Locations.Single(l => l.XCoord == j && l.YCoord == i) is StartingLocation)
            {
                <img class="img1" src="~/Images/MapImages/Village.png" />
            }
            else if (Model.Locations.Single(l => l.XCoord == j && l.YCoord == i) is Town)
            {
                <img class="img1" src="~/Images/MapImages/Village.png" />
            }
            else if (Model.Locations.Single(l => l.XCoord == j && l.YCoord == i) is River)
            {
                bool NorthRiver = (i == 20 || (Model.Locations.Single(l => l.XCoord == j && l.YCoord == i + 1) is IWater));
                bool EastRiver = (j == 20 || (Model.Locations.Single(l => l.XCoord == j + 1 && l.YCoord == i) is IWater));
                bool SouthRiver = (i == 1 || (Model.Locations.Single(l => l.XCoord == j && l.YCoord == i - 1) is IWater));
                bool WestRiver = ((j == 1) || Model.Locations.Single(l => l.XCoord == j - 1 && l.YCoord == i) is IWater);

                List<bool> amountOfRiverTiles = new List<bool>();
                amountOfRiverTiles.Add(NorthRiver);
                amountOfRiverTiles.Add(EastRiver);
                amountOfRiverTiles.Add(SouthRiver);
                amountOfRiverTiles.Add(WestRiver);

                int amountOfRiverTilesConnected = 0;
                foreach (var RiverCheck in amountOfRiverTiles)
                {
                    if (RiverCheck)
                    {
                        amountOfRiverTilesConnected++;
                    }
                }
                string tile = "";
                switch (amountOfRiverTilesConnected)
                {
                    case 1: tile = endNode(); break;
                    case 2: tile = ((NorthRiver && SouthRiver) || (EastRiver && WestRiver)) ? twoWayStraight() : twoWayCorner(); break;
                    case 3: tile = treeWay(); break;
                    case 4: tile = "/Images/MapImages/RiverGrandSplit.png"; break;
                    default: tile = "/Images/MapImages/RiverGrandSplit.png"; break;
                }

                string endNode()
                {
                    if (NorthRiver) { return "/Images/MapImages/RiverStartN.png"; }
                    else if (EastRiver) { return "/Images/MapImages/RiverStartE.png"; }
                    else if (SouthRiver) { return "/Images/MapImages/RiverStartS.png"; }
                    else if (WestRiver) { return "/Images/MapImages/RiverStartW.png"; }
                    else { return "/Images/MapImages/RiverGrandSplit.png"; }
                }

                string twoWayStraight()
                {
                    if (NorthRiver && SouthRiver) { return "/Images/MapImages/RiverStraightNS.png"; }
                    else if (EastRiver && WestRiver) { return "/Images/MapImages/RiverStraightEW.png"; }
                    else { return "/Images/MapImages/RiverGrandSplit.png"; }
                }

                string twoWayCorner()
                {
                    if (NorthRiver && EastRiver) { return "/Images/MapImages/RiverCornerNE.png"; }
                    else if (EastRiver && SouthRiver) { return "/Images/MapImages/RiverCornerSE.png"; }
                    else if (SouthRiver && WestRiver) { return "/Images/MapImages/RiverCornerSW.png"; }
                    else if (NorthRiver && WestRiver) { return "/Images/MapImages/RiverCornerNW.png"; }
                    else { return "/Images/MapImages/RiverGrandSplit.png"; }
                }

                string treeWay()
                {
                    if (!NorthRiver) { return "/Images/MapImages/RiverTSplitS.png"; }
                    else if (!EastRiver) { return "/Images/MapImages/RiverTSplitW.png"; }
                    else if (!SouthRiver) { return "/Images/MapImages/RiverTSplitN.png"; }
                    else if (!WestRiver) { return "/Images/MapImages/RiverTSplitE.png"; }
                    else { return "/Images/MapImages/RiverGrandSplit.png"; }
                }

                //tile = "\"" + tile + "\"";
                <img class="img1" src=@tile />
            }
            else if (Model.Locations.Single(l => l.XCoord == j && l.YCoord == i) is Lair)
            {
                <img class="img1" src="~/Images/MapImages/DragonLair.png" />
            }
            else if (Model.Locations.Single(l => l.XCoord == j && l.YCoord == i) is Plains)
            {
                <img class="img1" src="~/Images/MapImages/grassFiller.png" />
            }
            else if (Model.Locations.Single(l => l.XCoord == j && l.YCoord == i) is Lake)
            {
                <img class="img1" src="~/Images/MapImages/OceanFiller.png" />
            }
            else if (Model.Locations.Single(l => l.XCoord == j && l.YCoord == i) is Ocean)
            {

                bool NorthOcean = (i == 20 || (Model.Locations.Single(l => l.XCoord == j && l.YCoord == i + 1) is Ocean));
                bool NorthEastOcean = ((j == 20 || i == 20) || (Model.Locations.Single(l => l.XCoord == j + 1 && l.YCoord == i + 1) is Ocean));
                bool EastOcean = (j == 20 || (Model.Locations.Single(l => l.XCoord == j + 1 && l.YCoord == i) is Ocean));
                bool SouthEastOcean = ((j == 20 || i == 1) || (Model.Locations.Single(l => l.XCoord == j + 1 && l.YCoord == i - 1) is Ocean));
                bool SouthOcean = (i == 1 || (Model.Locations.Single(l => l.XCoord == j && l.YCoord == i - 1) is Ocean));
                bool SouthWestOcean = ((j == 1 || i == 1) || (Model.Locations.Single(l => (l.XCoord == j - 1) && (l.YCoord == i - 1)) is Ocean));
                bool WestOcean = ((j == 1) || Model.Locations.Single(l => l.XCoord == j - 1 && l.YCoord == i) is Ocean);
                bool NorthWestOcean = ((j == 1 || i == 20) || (Model.Locations.Single(l => l.XCoord == j - 1 && l.YCoord == i + 1) is Ocean));

                List<bool> amountOfWaterTiles = new List<bool>();
                amountOfWaterTiles.Add(NorthOcean);
                amountOfWaterTiles.Add(NorthEastOcean);
                amountOfWaterTiles.Add(EastOcean);
                amountOfWaterTiles.Add(SouthEastOcean);
                amountOfWaterTiles.Add(SouthOcean);
                amountOfWaterTiles.Add(SouthWestOcean);
                amountOfWaterTiles.Add(WestOcean);
                amountOfWaterTiles.Add(NorthWestOcean);

                int amountOfWaterTilesConnected = 0;
                foreach (var oceanCheck in amountOfWaterTiles)
                {
                    if (oceanCheck)
                    {
                        amountOfWaterTilesConnected++;
                    }
                }

                string tile = "";
                switch (amountOfWaterTilesConnected)
                {
                    case 0:
                    case 1: tile = ((NorthOcean) || (EastOcean) || (SouthOcean) || (WestOcean)) ?   side(): innerCorner(); break;
                    case 2:
                    case 3:
                    case 4:
                    case 5: tile = ((!NorthOcean&&!EastOcean)||(!EastOcean&&!SouthOcean)||(!SouthOcean&&!WestOcean)||(!WestOcean&&!NorthOcean))?innerCorner():side(); break;
                    case 6: tile = side(); break;
                    case 7: tile = (!NorthWestOcean || !NorthEastOcean || !SouthWestOcean || !SouthEastOcean) ? outerCorner() : side(); break;
                    case 8: tile = "/Images/MapImages/OceanFiller.png"; break;
                    default: tile = "/Images/MapImages/OceanFiller.png"; break;
                }

                string innerCorner()
                {
                    if ((!NorthWestOcean)&&(!NorthOcean)&&(!WestOcean)) { return "/Images/MapImages/OceanInnerCornerNW.png"; }
                    else if ((!SouthEastOcean) && (!SouthOcean) && (!EastOcean)) { return "/Images/MapImages/OceanInnerCornerSE.png"; }
                    else if ((!SouthWestOcean) && (!SouthOcean) && (!WestOcean)) { return "/Images/MapImages/OceanInnerCornerSW.png"; }
                    else if ((!NorthEastOcean) && (!NorthOcean) && (!EastOcean)) { return "/Images/MapImages/OceanInnerCornerNE.png"; }
                    else { return "/Images/MapImages/OceanFiller.png"; }
                }

                string outerCorner()
                {
                    if (!NorthEastOcean) { return "/Images/MapImages/OceanOuterCornerNE.png"; }
                    else if (!SouthEastOcean) { return "/Images/MapImages/OceanOuterCornerSE.png"; }
                    else if (!SouthWestOcean) { return "/Images/MapImages/OceanOuterCornerSW.png"; }
                    else if (!NorthWestOcean) { return "/Images/MapImages/OceanOuterCornerNW.png"; }
                    else { return "/Images/MapImages/OceanFiller.png"; }
                }

                string side()
                {
                    if (!NorthOcean)
                    {
                        if ((i == 20 || (Model.Locations.Single(l => l.XCoord == j && l.YCoord == i + 1) is IWater)))
                        {
                            return "/Images/MapImages/RiverEndingS.png";
                        }
                        else
                        {
                            return "/Images/MapImages/OceanSideN.png";
                        }
                    }
                    else if (!EastOcean)
                    {
                        if ((j == 20 || (Model.Locations.Single(l => l.XCoord == j + 1 && l.YCoord == i) is IWater)))
                        {
                            return "/Images/MapImages/RiverEndingW.png";
                        }
                        else
                        {
                            return "/Images/MapImages/OceanSideE.png";
                        }

                    }
                    else if (!SouthOcean)
                    {
                        if ((i == 1 || (Model.Locations.Single(l => l.XCoord == j && l.YCoord == i - 1) is IWater)))
                        {
                            return "/Images/MapImages/RiverEndingN.png";
                        }
                        else
                        {
                            return "/Images/MapImages/OceanSideS.png";
                        }

                    }
                    else if (!WestOcean)
                    {
                        if ((j == 1 || (Model.Locations.Single(l => l.XCoord == j - 1 && l.YCoord == i) is IWater)))
                        {
                            return "/Images/MapImages/RiverEndingE.png";
                        }
                        else
                        {
                            return "/Images/MapImages/OceanSideW.png";
                        }

                    }
                    else { return "/Images/MapImages/OceanFiller.png"; }
                }

                //tile = "\"" + tile + "\"";
                <img class="img1" src=@tile />
            }
            @if (j == Model.CharXCoord && i == Model.CharYCoord)
            {
                <img src="~/Images/MapImages/Character.png" class="character" />
            }
            </div>
        </td>
        }
</tr>
    }
</table>
    </robert>

<div class="row">
    <div class="col-md-4">
        <h2><a class="btn btn-default" href="/Location/Index">Go back to the game &raquo;</a></h2>
    </div>
</div>
